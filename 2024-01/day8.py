_input_sm= """
......#....#
...#....0...
....#0....#.
..#....0....
....0....#..
.#....A.....
...#........
#......#....
........A...
.........A..
..........#.
..........#.
""".strip()

_input_lg = """
..........M..........j.............y.....O........
...B...............q......m........lGO............
....................q......2.l.GQ...O.............
.....X.......................................4....
.....................q............................
....M......P...............xl.K.............2.....
....F.........L.......C.K..............m..........
..........FM......P....jy......m..........o...r...
..X.......P.....RL..............G..x..........4...
............L..........NC.....q...................
.....C.X...............K....y..........4..........
........S...R.............j.x.....V...4...........
.....................R..x.....V..i......m.........
...........................R.V......N.......X.....
.....F.........M......N......E....................
................v................T.......F......O.
.............................N...V.......Q........
...v.....................C.....i..................
......c.....W..n.w........................E.......
3...................c.....................Q..6....
...........h......................j...............
.......n.0......h.................E..............2
.v.............7.......120.....c..................
......n.0............w...........D.t.........E...r
....8..3......0.w.hP....z...D..T...............r..
.................f........T........G......eQ......
......f.n.....7..p................................
.....Y..7.......f......I......D......K............
............Uf....T..W.....D..r...i...............
......I...............................Z...........
....5....B.......b..............s..............Z..
..........d...W..Uwh.............c..........i.....
..I.3..Y......................e...................
.....p.b..........k......7........................
p...........k....I..b..........s..................
.....k.......o...........W........................
.A..Y..........U.................a........6.......
..A...Y.p...................................6.....
B......k..........................Z............u..
...3.....................s..............a.........
......A.........................g.....a...........
.......A....8...b.U......H....sS..................
.........................S1.............t.........
.....................9z..e.....5..1.g.u...........
.......................z....d....g....H.J....o.6..
........B................d.....u....9.J.H.........
.8........S.................u9.............J.....H
.....................Z5.............t1...........a
.....................e..v...................o..t..
.....8...............L.....z.............J........
""".strip()

from pprint import pp


def parse(raw):
	out = {}
	antennas = {}
	for y,line in enumerate(raw.split("\n")):
		for x,char in enumerate(line):
			out[x,y] = char
			if char != "." and char != "#":
				antennas.setdefault(char, [])	
				antennas[char].append( (x,y) )
	return out, antennas, x+1, y+1


def find_anodes_for_ant(positions, w, h):
	out = set()
	positions = set(positions)
	for x,y in positions:
		for tx, ty in positions:
			if (tx,ty) == (x,y):
				continue

			dist_x, dist_y = (tx-x, ty-y)
			anode_x, anode_y = x-dist_x, y-dist_y
			if anode_x >= w or anode_y >= h or anode_x < 0 or anode_y < 0:
				continue
			out.add( (anode_x, anode_y) )

	return out
	



def find_anodes(ants, w, h):
	anodes = set()
	for ant_key in ants:
		matching_ants = ants[ant_key]
		ant_anodes = find_anodes_for_ant(matching_ants, w, h)
		anodes = anodes | ant_anodes
	return anodes


def main(puzzle_input):
	area,ants, w,h = parse(puzzle_input)
	pp(ants)
	anodes = find_anodes(ants, w, h)
	print(len(anodes))

	

if __name__ == "__main__":
	#main(_input_sm)
	main(_input_lg)
